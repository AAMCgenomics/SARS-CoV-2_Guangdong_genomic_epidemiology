{"version":3,"sources":["components/Container/index.js","components/TreeFigure/Branches.js","components/TreeFigure/NodesLayer.js","components/TreeFigure/Tooltips.js","components/TreeFigure/index.js","Hooks/useFetchTree.js","components/Slider.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","css","children","BranchesLayer","colorScale","colorKey","Coalescent","filter","e","v0","node","length","attrs","strokeWidth","stroke","v1","annotations","Rectangular","NodesLayers","setTree","tree","height","useFigtreeContext","scales","nodeWidth","min","max","getTips","Circle","v","r","fill","hoveredAttrs","Rectangle","cursor","pointerEvents","width","transform","interactions","hoverKey","tooltip","id","split","slice","join","getNode","opacity","ToolTips","className","type","effect","delayHide","place","delayUpdate","TreeFigure","path","callback","display","margins","setIsTreeLoaded","useState","originalTree","setOriginalTree","map","t","collapseNodes","n","posterior","console","log","useEffect","fetch","process","then","res","text","parseNexus","datePrefix","dateFormat","externalNodes","tip","Guangdong","name","reverse","annotateNode","ReactTooltip","rebuild","colorScaleDomain","annotationTypes","values","timeScale","scaleTime","domain","getDateRange","range","left","right","scheme","schemeTableau10","concat","scaleOrdinal","activeLocations","activeColors","c","activeColorScale","pos","x","y","top","layout","customLayout","onClick","direction","scale","gap","ticks","number","format","timeFormat","padding","style","lift","startWidth","sortFactor","Discrete","columns","swatchSize","annotation","toottipContent","roottipContent","highlightedVertices","lineage","textLabels","Slider","setColorKey","getNewColorKey","App","isTreeLoaded","bottom","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d0101926.chunk.js","sourcesContent":["/** @jsx jsx */\nimport {css, jsx} from \"@emotion/core\";\nimport React from \"react\"\nimport {InteractionContainer} from \"figtreejs-react\";\n\nconst container = `display: flex; \n                   flex-direction: row;\n                    padding-left: 2%; \n                    padding-right:2%; \n                    padding-top: 5%; \n                    flex-wrap: nowrap; \n                    justify-content: space-around;\n                    align-items: center;`;\nexport default function Container(props){\n    return(\n        <div css={css`${container}`}>\n        <InteractionContainer>\n            {props.children}\n        </InteractionContainer>\n    </div>)\n}","import React from \"react\";\nimport {Branches} from \"figtreejs-react\";\nexport default function BranchesLayer(props){\n    const {colorScale,colorKey}  = props;\n    return (\n        <>\n            <Branches.Coalescent filter={(e => e.v0.node.children.length > 2)} attrs={{\n                strokeWidth: 1,\n                stroke: e => e.v1.node.annotations[colorKey] ? colorScale(e.v1.node.annotations[colorKey]) : \"#9F9B96\",\n\n\n            }}/>\n            <Branches.Rectangular filter={(e => e.v0.node.children.length <= 2)} attrs={{\n                strokeWidth: 1,\n                stroke: e => e.v1.node.annotations[colorKey] ? colorScale(e.v1.node.annotations[colorKey]) : \"#9F9B96\",\n\n            }}/>\n        </>)\n}","import React from \"react\";\nimport {Nodes,NodeBackgrounds,getTips, getNode, useFigtreeContext} from \"figtreejs-react\";\nimport {max, min} from \"d3-array\";\n\nexport default function NodesLayers(props){\n    const {colorScale,colorKey,setTree,tree,} = props;\n    const {height} = useFigtreeContext.scales();\n    const nodeWidth = min([10,max([2,height/2/getTips(tree).length])]);\n    return(\n        <>\n            <NodeBackgrounds.Circle filter={(v => !v.node.children)}\n                                    attrs={{r: nodeWidth,fill:\"white\", strokeWidth: 1, stroke:  v => colorScale(v.node.annotations[colorKey]),}}\n                                    hoveredAttrs={{r: nodeWidth + 4 }}/>\n            <Nodes.Rectangle\n                filter={(v => v.node.children && v.node.children.length > 2)}\n                attrs={{\n                    cursor: \"pointer\",\n                    fill: \"none\",\n                    pointerEvents: \"all\",\n                    width: 50,\n                    height: 20,\n                    transform: `translate(0,-${20 / 2})`\n                }}\n                interactions={{\n                    \"onClick\": (v) => {\n                        setTree(v.node)\n                    }\n                }}\n                hoverKey={null}/>\n            <Nodes.Circle tooltip={{'data-tip': v => `${v.id.split(\"|\").slice(1).join(\"|\")} [set:${getNode(tree,v.id).annotations[colorKey]}]`, \"data-for\": \"tip-label\"}}\n                          filter={(v => !v.node.children)}\n                          attrs={{\n                              r: nodeWidth,\n                              fill: v => colorScale(v.node.annotations[colorKey]),\n                              strokeWidth: 0,\n                              opacity:0.7}}\n                          hoveredAttrs={{r: nodeWidth + 4}}/>\n            </>\n    )\n}","/** @jsx jsx */\nimport { css, jsx } from '@emotion/core'\nimport React from \"react\";\nimport ReactTooltip from \"react-tooltip\";\n\n\n\nexport default function ToolTips(){\n    return (\n            <ReactTooltip css={css`font-size:10px`} className = {\"toolTip\"} id=\"tip-label\" type='light' effect={\"solid\"}   delayHide={200}  place={'right'} delayUpdate={50}/>\n    )\n}\n","\nimport React, {useEffect,useState} from \"react\"\nimport {timeFormat} from \"d3-time-format\";\nimport ReactTooltip from \"react-tooltip\";\nimport useFetchTree from \"../../Hooks/useFetchTree\";\nimport {getDateRange,FigTree,Axis,AxisBars,Legend,highlightedVertices,collapseNodes,Nodes} from \"figtreejs-react\";\nimport {scaleOrdinal, scaleTime} from \"d3-scale\";\nimport BranchesLayer from \"./Branches\";\nimport NodesLayers from \"./NodesLayer\";\nimport ToolTips from \"./Tooltips\"\nimport {schemeTableau10} from \"d3-scale-chromatic\";\nexport default function TreeFigure(props) {\n\n    const {width, height,display, margins, setIsTreeLoaded,colorKey} = props;\n\n    const [tree,setTree]=useState(null);\n    const [originalTree,setOriginalTree] = useState(null);\n\n\n\n    useFetchTree(\"/data/MCC_tree_annotated.tree\",\n        (tree, map) => {\n\n        const t = collapseNodes(tree,n=>n.annotations.posterior<0.5);\n            setTree(t);\n            console.log(t);\n            setOriginalTree(t);\n            setIsTreeLoaded(true)\n        });\n\n    useEffect(()=>{\n        ReactTooltip.rebuild();\n    },[tree]);\n\n\n    if(display) {\n\n        const colorScaleDomain = originalTree.annotationTypes[colorKey].values;\n        const timeScale = scaleTime().domain(getDateRange(tree)).range([0,(width-margins.left-margins.right)]);\n\n\n        const scheme = schemeTableau10.slice(0,5)\n            .concat(\"#9F9B96\");\n        const locationScheme = [\"#A79D96\",\"#BF0F34\"];\n        const colorScale = scaleOrdinal().domain(colorScaleDomain).range(colorKey===\"Guangdong\"?locationScheme:scheme);\n\n        const activeLocations =tree.annotationTypes[colorKey]? [...tree.annotationTypes[colorKey].values]:[];\n        const activeColors = activeLocations.map(c=>colorScale(c));\n        const activeColorScale =  scaleOrdinal().domain(activeLocations).range(activeColors);\n        return (\n            <>\n            {/*<input type={\"range\"} max={1} min={0} step={0.1}/>*/}\n\n                    <FigTree width={width} height={height} margins={margins}\n                             tree={tree} pos={{x: margins.left, y: margins.top}} layout={customLayout}>\n                        <rect width={width} height={height} fill={\"none\"}\n                              transform={`translate(${-margins.left},${-margins.top})`}\n                              pointerEvents={\"all\"} onClick={() => {\n                            setTree(originalTree)\n                        }}/>\n                        <Axis direction={\"horizontal\"} scale={timeScale} gap={10}\n                              ticks={{number: 10, format: timeFormat(\"%m-%d\"), padding: 20, style: {}, length: 6}}>\n                            <AxisBars lift={5}/>\n                        </Axis>\n                        <Nodes.Coalescent filter={(v => v.node.children && v.node.children.length > 2)}\n                                          attrs={{fill: v => (v.node.annotations[colorKey] ? colorScale(v.node.annotations[colorKey]) : \"#9F9B96\")}}\n                                          interactions={{\n                                              \"onClick\": (v) => {\n                                                  console.log(v);\n                                                  setTree(v.node)\n                                              }\n                                          }}\n                                          startWidth={1}\n                                          sortFactor={1}\n                        />\n                        <BranchesLayer colorScale={colorScale} colorKey={colorKey}/>\n                        <NodesLayers colorScale={colorScale} colorKey={colorKey} setTree={setTree} tree={tree}/>\n\n                        <Legend.Discrete height={700} columns={1} width={200} pos={{x: width - 200, y: 0}}\n                                         swatchSize={8}\n                                         scale={activeColorScale} annotation={colorKey}/>\n                    </FigTree>\n                <ToolTips toottipContent={\"\"} tree={tree} roottipContent={\"\"} colorKey={colorKey}/>\n            </>\n        )\n    }else{\n        return null;\n    }\n}\n\nfunction customLayout(tree){\n   return highlightedVertices(tree,0.4,n=>n.annotations.lineage)\n}","import {useEffect} from \"react\";\nimport {\n    orderByNodeDensity,\n    parseNexus, getTips, annotateNode, getNodes, getNode\n} from \"figtreejs-react\";\nconst processTree=tree=> {\n    return tree;\n    // return orderByNodeDensity(tree, false);\n};\nexport default function useFetchTree(path,callback){\n    useEffect(()=>{\n        ///data/2020-03-10/2020-03-19_nCoV.mcc.tre\n        fetch(process.env.PUBLIC_URL+path)\n            .then(res=> res.text())\n            .then(text=> {\n                let tree= processTree(parseNexus(text,{datePrefix: \"|\",dateFormat:\"%Y-%m-%d\"})[0]);\n                const externalNodes =getTips(tree);//.map(t=>t.name);\n                for(const tip of externalNodes) {\n                    const Guangdong = tip.name.split(\"|\").reverse()[2]===\"Guangdong\"?\"Guangdong\":'Other';\n                    tree=annotateNode(tree,tip.id,{\"Guangdong\":Guangdong})\n                }\n                callback(tree);\n                // console.log(countryContinentMap);\n                // setOriginalTree(tree);\n                // setTree(tree);\n            })\n    },[]);\n\n}","/** @jsx jsx */\nimport {css, jsx} from '@emotion/core';\nimport React from \"react\";\n\nconst s = `position: relative;\n                display: inline-block;\n                width: 60px;\n                height: 34px;\n                    input {opacity: 0;\n                        width: 0;\n                        height: 0;\n                    }`;\n\nconst slider = ` position: absolute;\n  cursor: pointer;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: #ccc;\n  -webkit-transition: .4s;\n  transition: .4s;\n\n   :before {\n  position: absolute;\n  content: \"\";\n  height: 26px;\n  width: 26px;\n  left: 4px;\n  bottom: 4px;\n  background-color: white;\n  -webkit-transition: .4s;\n  transition: .4s;\n}\n`\n\nconst input = `:checked + span {\n  background-color: #ccc;\n}\n\n:focus + span {\n  box-shadow: 0 0 1px #2196F3;\n}\n\n:checked + span:before {\n  -webkit-transform: translateX(26px);\n  -ms-transform: translateX(26px);\n  transform: translateX(26px);\n}`;\nconst textLabels = `padding-left:4px;padding-right:4px`;\nconst container = `display:flex;flex-direction:row; justify-content:center;align-items:center`;\nexport default function Slider(props) {\n    const {colorKey, setColorKey, display} = props;\n    if (display) {\n        return (\n            <div css={css`${container}`}>\n                <p css={css`${textLabels}`}>Lineage</p>\n                <label css={css`${s}`}>\n                    <input css={css`${input}`} type=\"checkbox\" onClick={() => setColorKey(getNewColorKey(colorKey))}/>\n                    <span css={css`${slider}`}></span>\n                </label>\n                <p css={css`${textLabels}`}>Location</p>\n            </div>\n        )\n    } else {\n        return null;\n    }\n}\n\n// onChange={setColorKey(getNewColorKey(colorKey))}\nfunction getNewColorKey(colorKey) {\n    return colorKey === \"lineage\" ? \"Guangdong\" : \"lineage\";\n}","/** @jsx jsx */\nimport { css, jsx } from '@emotion/core'\nimport React, { useState} from 'react';\n\nimport {schemeTableau10,schemeSet3,schemePaired} from \"d3-scale-chromatic\";\nimport {scaleOrdinal} from \"d3-scale\";\nimport Container from \"./components/Container\";\nimport TreeFigure from \"./components/TreeFigure\";\nimport Slider from \"./components/Slider\";\n\n\nfunction App() {\n\n    const [isTreeLoaded, setIsTreeLoaded] = useState(false);\n    const width = 1100, height = 500, margins = {top: 10, right: 210, bottom: 40, left: 40};\n\n    const [colorKey, setColorKey] = useState(\"lineage\");\n\n\n    return (\n        <div>\n            <div css={css`text-align:center;margin:auto;display:${isTreeLoaded ? \"none\" : \"inline\"}`}>\n                <p>Loading data</p>\n            </div>\n\n            <Container>\n                <div css={css`flex-basis:95%;`}>\n                    <Slider colorKey = {colorKey} setColorKey={setColorKey} display={isTreeLoaded}/>\n                    <TreeFigure display={isTreeLoaded}\n                                setIsTreeLoaded={setIsTreeLoaded} width={width} height={height} margins={margins} colorKey={colorKey}/>\n                </div>\n            </Container>\n        </div>\n    )\n\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}